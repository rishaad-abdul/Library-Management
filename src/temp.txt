import React, { useState } from "react";
import {
  BrowserRouter as Router,
  Routes,
  Route,
  Link,
  useLocation,
} from "react-router-dom";

// Dashboard Component
const Dashboard = () => {
  const [stats, setStats] = useState({
    books: 0,
    totalDues: 0,
    activeLoans: 0,
  });
  const [loading, setLoading] = useState(true);

  React.useEffect(() => {
    fetchDashboardStats();
  }, []);

  const fetchDashboardStats = async () => {
    try {
      const response = await fetch("http://localhost:5195/api/dashboard");

      const data = await response.json();
      console.log(data);
      setStats(data);
    } catch (error) {
      console.error("Error fetching dashboard stats:", error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) return <div className="loading">Loading...</div>;

  return (
    <div className="dashboard">
      <h2>Dashboard</h2>
      <div className="stats-grid">
        <div className="stat-card">
          <h3>Total Books</h3>
          <p className="stat-number">{stats.totalBooks}</p>
        </div>
        <div className="stat-card">
          <h3>Total Dues</h3>
          <p className="stat-number">₹{stats.totalDues}</p>
        </div>
        <div className="stat-card">
          <h3>Active Loans</h3>
          <p className="stat-number">{stats.pendingLoans}</p>
        </div>
      </div>
    </div>
  );
};

// Treasury Component
const Treasury = () => {
  const [books, setBooks] = useState([]);
  const [loading, setLoading] = useState(true);

  React.useEffect(() => {
    fetchBooks();
  }, []);

  const fetchBooks = async () => {
    try {
      const response = await fetch("http://localhost:5195/api/books");
      const data = await response.json();
      setBooks(data);
    } catch (error) {
      console.error("Error fetching books:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id) => {
    if (window.confirm("Are you sure you want to delete this book?")) {
      try {
        await fetch(`http://localhost:5195/api/books/${id}`, {
          method: "DELETE",
        });
        fetchBooks();
      } catch (error) {
        console.error("Error deleting book:", error);
      }
    }
  };

  const ActionMenu = ({ book }) => {
    const [showMenu, setShowMenu] = useState(false);

    return (
      <div className="action-menu">
        <button className="menu-trigger" onClick={() => setShowMenu(!showMenu)}>
          ⋮
        </button>
        {showMenu && (
          <div className="menu-dropdown">
            <button
              onClick={() => {
                /* Handle edit */
              }}
            >
              Edit
            </button>
            <button onClick={() => handleDelete(book.id)}>Delete</button>
          </div>
        )}
      </div>
    );
  };

  if (loading) return <div className="loading">Loading...</div>;

  return (
    <div className="treasury">
      <h2>Treasury - All Books</h2>
      <div className="table-container">
        <table>
          <thead>
            <tr>
              <th>Title</th>
              <th>Author</th>
              <th>Genre</th>
              <th>ISBN</th>
              <th>Domain</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {books.map((book) => (
              <tr key={book.id}>
                <td>{book.title}</td>
                <td>{book.author}</td>
                <td>{book.genre}</td>
                <td>{book.isbn}</td>
                <td>{book.domain}</td>
                <td>
                  <ActionMenu book={book} />
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

// Loans Component
const Loans = () => {
  const [loans, setLoans] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showLendForm, setShowLendForm] = useState(null);
  const [lendDetails, setLendDetails] = useState({
    personName: "",
    fromDate: "",
    toDate: "",
    pricePerDay: "",
  });


  React.useEffect(() => {
    fetchLoans();
  }, []);

  const fetchLoans = async () => {
    try {
      const response = await fetch("http://localhost:5195/api/loans/pending");
      const data = await response.json();
      setLoans(data);
    } catch (error) {
      console.error("Error fetching loans:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleClearDue = async (id) => {
    try {
      await fetch(`http://localhost:5195/api/loans/${id}/clear`, {
        method: "POST",
      });
      fetchLoans();
    } catch (error) {
      console.error("Error clearing due:", error);
    }
  };

  const handleDelete = async (id) => {
    if (window.confirm("Are you sure you want to delete this loan?")) {
      try {
        await fetch(`http://localhost:5195/api/loans/${id}`, {
          method: "DELETE",
        });
        fetchLoans();
      } catch (error) {
        console.error("Error deleting loan:", error);
      }
    }
  };

  const ActionMenu = ({ loan }) => {
    const [showMenu, setShowMenu] = useState(false);

    return (
      <div className="action-menu">
        <button className="menu-trigger" onClick={() => setShowMenu(!showMenu)}>
          ⋮
        </button>
        {showMenu && (
          <div className="menu-dropdown">
            <button onClick={() => handleClearDue(loan.id)}>Clear Due</button>
            <button
              onClick={() => {
                setShowLendForm(loan); // sets loan object
                setLendDetails({
                  personName: loan.personName,
                  fromDate: loan.fromDate.slice(0, 10), // to format "yyyy-mm-dd"
                  toDate: loan.toDate.slice(0, 10),
                  pricePerDay: loan.pricePerDay,
                });
                setShowMenu(false);
              }}
            >
              Edit
            </button>
            <button onClick={() => handleDelete(loan.id)}>Delete</button>
          </div>
          
        )}
      </div>
    );
  };

  if (loading) return <div className="loading">Loading...</div>;

  return (
    <div className="loans">
      <h2>Loans - Pending Returns</h2>
      <div className="table-container">
        <table>
          <thead>
            <tr>
              <th>Person Name</th>
              <th>Book Name</th>
              <th>Days</th>
              <th>Amount</th>
              <th>From Date</th>
              <th>To Date</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {loans.map((loan) => (
              <tr key={loan.id}>
                <td>{loan.personName}</td>
                <td>{loan.bookName}</td>
                <td>{loan.days}</td>
                <td>₹{loan.amount}</td>
                <td>{new Date(loan.fromDate).toLocaleDateString()}</td>
                <td>{new Date(loan.toDate).toLocaleDateString()}</td>
                <td>
                  <ActionMenu loan={loan} />
                </td>
              </tr>
            ))}
          </tbody>
        </table>
        {showLendForm && (
        <div className="modal-overlay">
          <div className="modal">
            <h3>Edit Loan for "{showLendForm.bookName}"</h3>
            <form
              onSubmit={async (e) => {
                e.preventDefault();
                try {
                  const updatedLoan = {
                    id: showLendForm.id,
                    personName: lendDetails.personName,
                    fromDate: lendDetails.fromDate,
                    toDate: lendDetails.toDate,
                    pricePerDay: parseFloat(lendDetails.pricePerDay),
                  };

                  await fetch(`http://localhost:5195/api/loans/${showLendForm.id}`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(updatedLoan),
                  });

                  alert("Loan updated successfully!");
                  setShowLendForm(null);
                  fetchLoans();
                } catch (err) {
                  console.error("Error updating loan:", err);
                }
              }}
              className="lend-form"
            >
              <input
                placeholder="Person Name"
                value={lendDetails.personName}
                onChange={(e) =>
                  setLendDetails({ ...lendDetails, personName: e.target.value })
                }
                required
              />
              <input
                type="date"
                value={lendDetails.fromDate}
                onChange={(e) =>
                  setLendDetails({ ...lendDetails, fromDate: e.target.value })
                }
                required
              />
              <input
                type="date"
                value={lendDetails.toDate}
                onChange={(e) =>
                  setLendDetails({ ...lendDetails, toDate: e.target.value })
                }
                required
              />
              <input
                type="number"
                value={lendDetails.pricePerDay}
                onChange={(e) =>
                  setLendDetails({ ...lendDetails, pricePerDay: e.target.value })
                }
                required
              />
              <div className="form-buttons">
                <button type="submit">Update Loan</button>
                <button type="button" onClick={() => setShowLendForm(null)}>
                  Cancel
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      </div>
    </div>
  );
};

// Books Component
const Books = () => {
  const [books, setBooks] = useState([]);
  const [newBook, setNewBook] = useState({
    title: null,
    author: null,
    genre: null,
    isbn: null,
    domain: null,
  });
  const [editing, setEditing] = useState(null);
  const [showLendForm, setShowLendForm] = useState(null);
  const [lendDetails, setLendDetails] = useState({
    personName: "",
    fromDate: "",
    toDate: "",
    pricePerDay: "",
  });

  React.useEffect(() => {
    fetchBooks();
  }, []);

  const fetchBooks = async () => {
    try {
      const res = await fetch("http://localhost:5195/api/books");
      const data = await res.json();
      setBooks(data);
    } catch (error) {
      console.error("Error fetching books:", error);
    }
  };

  const handleBookSubmit = async (e) => {
    e.preventDefault();
    try {
      const bookData = {
        id: editing ? editing.id : 0,
        title: newBook.title,
        author: newBook.author,
        genre: newBook.genre,
        isbn: newBook.isbn,
        domain: newBook.domain,
      };

      if (editing) {
        await fetch(`http://localhost:5195/api/books/${editing.id}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(bookData),
        });
      } else {
        await fetch("http://localhost:5195/api/books", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(bookData),
        });
      }

      setNewBook({ title: "", author: "", genre: "", isbn: "", domain: "" });
      setEditing(null);
      fetchBooks();
    } catch (error) {
      console.error("Error saving book:", error);
    }
  };

  const handleLendSubmit = async (e) => {
    e.preventDefault();
    try {
      const lendData = {
        bookId: showLendForm.id,
        bookName: showLendForm.title,
        personName: lendDetails.personName,
        fromDate: lendDetails.fromDate,
        toDate: lendDetails.toDate,
        pricePerDay: parseFloat(lendDetails.pricePerDay),
      };

      await fetch("http://localhost:5195/api/loans", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(lendData),
      });

      setLendDetails({
        personName: "",
        fromDate: "",
        toDate: "",
        pricePerDay: "",
      });
      setShowLendForm(null);
      alert("Lending details added successfully!");
    } catch (error) {
      console.error("Error adding lend details:", error);
    }
  };

  const handleDelete = async (id) => {
    if (window.confirm("Are you sure you want to delete this book?")) {
      try {
        await fetch(`http://localhost:5195/api/books/${id}`, {
          method: "DELETE",
        });
        fetchBooks();
      } catch (error) {
        console.error("Error deleting book:", error);
      }
    }
  };

  const ActionMenu = ({ book }) => {
    const [showMenu, setShowMenu] = useState(false);

    return (
      <div className="action-menu">
        <button className="menu-trigger" onClick={() => setShowMenu(!showMenu)}>
          ⋮
        </button>
        {showMenu && (
          <div className="menu-dropdown">
            <button
              onClick={() => {
                setNewBook(book);
                setEditing(book);
                setShowMenu(false);
              }}
            >
              Edit
            </button>
            <button
              onClick={() => {
                setShowLendForm(book);
                setShowMenu(false);
              }}
            >
              Add Lend
            </button>
            <button onClick={() => handleDelete(book.id)}>Delete</button>
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="books">
      <h2>Books Management</h2>

      {/* Add/Edit Book Form */}
      <div className="form-section">
        <h3>{editing ? "Edit Book" : "Add New Book"}</h3>
        <form onSubmit={handleBookSubmit} className="book-form">
          <div className="form-row">
            <input
              placeholder="Title"
              name="title"
              value={newBook.title}
              onChange={(e) =>
                setNewBook({ ...newBook, title: e.target.value })
              }
              required
            />
            <input
              placeholder="Author"
              name="author"
              value={newBook.author}
              onChange={(e) =>
                setNewBook({ ...newBook, author: e.target.value })
              }
            />
            <input
              placeholder="Genre"
              name="genre"
              value={newBook.genre}
              onChange={(e) =>
                setNewBook({ ...newBook, genre: e.target.value })
              }
            />
          </div>
          <div className="form-row">
            <input
              placeholder="ISBN"
              name="isbn"
              value={newBook.isbn}
              onChange={(e) => setNewBook({ ...newBook, isbn: e.target.value })}
            />
            <input
              placeholder="Domain"
              name="domain"
              value={newBook.domain}
              onChange={(e) =>
                setNewBook({ ...newBook, domain: e.target.value })
              }
            />
          </div>
          <div className="form-buttons">
            <button type="submit">
              {editing ? "Update Book" : "Add Book"}
            </button>
            {editing && (
              <button
                type="button"
                onClick={() => {
                  setEditing(null);
                  setNewBook({
                    title: "",
                    author: "",
                    genre: "",
                    isbn: "",
                    domain: "",
                  });
                }}
              >
                Cancel
              </button>
            )}
          </div>
        </form>
      </div>

      {/* Lend Form Modal */}
      {showLendForm && (
        <div className="modal-overlay">
          <div className="modal">
            <h3>Add Lending Details for "{showLendForm.title}"</h3>
            <form onSubmit={handleLendSubmit} className="lend-form">
              <input
                placeholder="Person Name"
                value={lendDetails.personName}
                onChange={(e) =>
                  setLendDetails({ ...lendDetails, personName: e.target.value })
                }
                required
              />
              <input
                type="date"
                placeholder="From Date"
                value={lendDetails.fromDate}
                onChange={(e) =>
                  setLendDetails({ ...lendDetails, fromDate: e.target.value })
                }
                required
              />
              <input
                type="date"
                placeholder="To Date"
                value={lendDetails.toDate}
                onChange={(e) =>
                  setLendDetails({ ...lendDetails, toDate: e.target.value })
                }
                required
              />
              <input
                type="number"
                placeholder="Price Per Day"
                value={lendDetails.pricePerDay}
                onChange={(e) =>
                  setLendDetails({
                    ...lendDetails,
                    pricePerDay: e.target.value,
                  })
                }
                required
              />
              <div className="form-buttons">
                <button type="submit">Add Lending Details</button>
                <button type="button" onClick={() => setShowLendForm(null)}>
                  Cancel
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Books Table */}
      <div className="table-container">
        <table>
          <thead>
            <tr>
              <th>Title</th>
              <th>Author</th>
              <th>Genre</th>
              <th>ISBN</th>
              <th>Domain</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {books.map((book) => (
              <tr key={book.id}>
                <td>{book.title}</td>
                <td>{book.author}</td>
                <td>{book.genre}</td>
                <td>{book.isbn}</td>
                <td>{book.domain}</td>
                <td>
                  <ActionMenu book={book} />
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

// Account Component
const Account = () => {
  const [account, setAccount] = useState({
    name: "",
    email: "",
    mobile: "",
    department: "",
    dateOfBirth: "",
  });
  const [editing, setEditing] = useState(false);
  const [loading, setLoading] = useState(true);

  React.useEffect(() => {
    fetchAccount();
  }, []);

  const fetchAccount = async () => {
    try {
      const response = await fetch("http://localhost:5195/api/account/me");
      const data = await response.json();
      setAccount(data);
    } catch (error) {
      console.error("Error fetching account:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async () => {
    try {
      await fetch("http://localhost:5195/api/account/me", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(account),
      });
      setEditing(false);
      alert("Account updated successfully!");
    } catch (error) {
      console.error("Error updating account:", error);
    }
  };

  if (loading) return <div className="loading">Loading...</div>;

  return (
    <div className="account">
      <h2>Account Details</h2>
      <div className="account-form">
        <div className="form-group">
          <label>Name:</label>
          <input
            type="text"
            value={account.name}
            onChange={(e) => setAccount({ ...account, name: e.target.value })}
            disabled={!editing}
          />
        </div>
        <div className="form-group">
          <label>Email:</label>
          <input
            type="email"
            value={account.email}
            onChange={(e) => setAccount({ ...account, email: e.target.value })}
            disabled={!editing}
          />
        </div>
        <div className="form-group">
          <label>Mobile:</label>
          <input
            type="tel"
            value={account.mobile}
            onChange={(e) => setAccount({ ...account, mobile: e.target.value })}
            disabled={!editing}
          />
        </div>
        <div className="form-group">
          <label>Department:</label>
          <input
            type="text"
            value={account.department}
            onChange={(e) =>
              setAccount({ ...account, department: e.target.value })
            }
            disabled={!editing}
          />
        </div>
        <div className="form-group">
          <label>Date of Birth:</label>
          <input
            type="date"
            value={account.dateOfBirth}
            onChange={(e) =>
              setAccount({ ...account, dateOfBirth: e.target.value })
            }
            disabled={!editing}
          />
        </div>
        <div className="form-buttons">
          {editing ? (
            <>
              <button onClick={handleSave}>Save</button>
              <button onClick={() => setEditing(false)}>Cancel</button>
            </>
          ) : (
            <button onClick={() => setEditing(true)}>Edit Details</button>
          )}
        </div>
      </div>
    </div>
  );
};

// Sidebar Component
const Sidebar = () => {
  const location = useLocation();

  const isActive = (path) => location.pathname === path;

  return (
    <div className="sidebar">
      <div className="sidebar-header">
        <h3>Library System</h3>
      </div>
      <nav className="sidebar-nav">
        <Link to="/" className={isActive("/") ? "active" : ""}>
          Dashboard
        </Link>
        <Link to="/treasury" className={isActive("/treasury") ? "active" : ""}>
          Treasury
        </Link>
        <Link to="/loans" className={isActive("/loans") ? "active" : ""}>
          Loans
        </Link>
        <Link to="/books" className={isActive("/books") ? "active" : ""}>
          Books
        </Link>
        <Link to="/account" className={isActive("/account") ? "active" : ""}>
          Account
        </Link>
      </nav>
    </div>
  );
};

// Main App Component
const App = () => {
  return (
    <Router>
      <div className="app">
        <Sidebar />
        <div className="main-content">
          <Routes>
            <Route path="/" element={<Dashboard />} />
            <Route path="/treasury" element={<Treasury />} />
            <Route path="/loans" element={<Loans />} />
            <Route path="/books" element={<Books />} />
            <Route path="/account" element={<Account />} />
          </Routes>
        </div>
      </div>

      <style jsx>{`
        .app {
          display: flex;
          height: 100vh;
          font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
            sans-serif;
        }

        .sidebar {
          width: 250px;
          background: #2c3e50;
          color: white;
          padding: 0;
        }

        .sidebar-header {
          padding: 20px;
          border-bottom: 1px solid #34495e;
        }

        .sidebar-header h3 {
          margin: 0;
          font-size: 1.2em;
        }

        .sidebar-nav {
          display: flex;
          flex-direction: column;
          padding: 20px 0;
        }

        .sidebar-nav a {
          color: #ecf0f1;
          text-decoration: none;
          padding: 12px 20px;
          display: block;
          transition: background-color 0.3s;
        }

        .sidebar-nav a:hover {
          background: #34495e;
        }

        .sidebar-nav a.active {
          background: #3498db;
        }

        .main-content {
          flex: 1;
          padding: 20px;
          overflow-y: auto;
          background: #f8f9fa;
        }

        .dashboard h2,
        .treasury h2,
        .loans h2,
        .books h2,
        .account h2 {
          margin-bottom: 20px;
          color: #2c3e50;
        }

        .stats-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
          gap: 20px;
          margin-bottom: 30px;
        }

        .stat-card {
          background: white;
          padding: 20px;
          border-radius: 8px;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
          text-align: center;
        }

        .stat-card h3 {
          margin: 0 0 10px 0;
          color: #7f8c8d;
          font-size: 0.9em;
        }

        .stat-number {
          font-size: 2em;
          font-weight: bold;
          color: #2c3e50;
          margin: 0;
        }

        .table-container {
          background: white;
          border-radius: 8px;
          overflow: hidden;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        table {
          width: 100%;
          border-collapse: collapse;
        }

        th,
        td {
          padding: 12px;
          text-align: left;
          border-bottom: 1px solid #ecf0f1;
        }

        th {
          background: #f8f9fa;
          font-weight: 600;
          color: #2c3e50;
        }

        .action-menu {
          position: relative;
        }

        .menu-trigger {
          background: none;
          border: none;
          font-size: 1.2em;
          cursor: pointer;
          padding: 4px 8px;
          border-radius: 4px;
        }

        .menu-trigger:hover {
          background: #f8f9fa;
        }

        .menu-dropdown {
          position: absolute;
          right: 0;
          top: 100%;
          background: white;
          border: 1px solid #ddd;
          border-radius: 4px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          z-index: 1000;
          min-width: 100px;
        }

        .menu-dropdown button {
          display: block;
          width: 100%;
          padding: 8px 12px;
          border: none;
          background: none;
          text-align: left;
          cursor: pointer;
        }

        .menu-dropdown button:hover {
          background: #f8f9fa;
        }

        .form-section {
          background: white;
          padding: 20px;
          border-radius: 8px;
          margin-bottom: 20px;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .form-section h3 {
          margin: 0 0 15px 0;
          color: #2c3e50;
        }

        .form-row {
          display: flex;
          gap: 15px;
          margin-bottom: 15px;
        }

        .form-row input {
          flex: 1;
          padding: 10px;
          border: 1px solid #ddd;
          border-radius: 4px;
          font-size: 14px;
        }

        .form-buttons {
          display: flex;
          gap: 10px;
        }

        .form-buttons button {
          padding: 10px 20px;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          font-size: 14px;
        }

        .form-buttons button[type="submit"] {
          background: #3498db;
          color: white;
        }

        .form-buttons button[type="button"] {
          background: #95a5a6;
          color: white;
        }

        .modal-overlay {
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background: rgba(0, 0, 0, 0.5);
          display: flex;
          justify-content: center;
          align-items: center;
          z-index: 1000;
        }

        .modal {
          background: white;
          padding: 20px;
          border-radius: 8px;
          width: 400px;
          max-width: 90vw;
        }

        .modal h3 {
          margin: 0 0 15px 0;
          color: #2c3e50;
        }

        .lend-form input {
          width: 100%;
          padding: 10px;
          border: 1px solid #ddd;
          border-radius: 4px;
          margin-bottom: 10px;
          font-size: 14px;
        }

        .account-form {
          background: white;
          padding: 20px;
          border-radius: 8px;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .form-group {
          margin-bottom: 15px;
        }

        .form-group label {
          display: block;
          margin-bottom: 5px;
          color: #2c3e50;
          font-weight: 500;
        }

        .form-group input {
          width: 100%;
          padding: 10px;
          border: 1px solid #ddd;
          border-radius: 4px;
          font-size: 14px;
        }

        .form-group input:disabled {
          background: #f8f9fa;
          color: #6c757d;
        }

        .loading {
          display: flex;
          justify-content: center;
          align-items: center;
          height: 200px;
          color: #6c757d;
        }
      `}</style>
    </Router>
  );
};

export default App;
{
    "loanId": 2,
    "userId": "1",
    "personName": "dff",
    "studentId": "f8839b4f-a968-4e6f-aa0a-10242a92e9fe",
    "bookId": 1,
    "bookName": "vdvd",
    "fromDate": "2025-07-07T00:00:00",
    "toDate": "2025-08-01T00:00:00",
    "pricePerDay": 4,
    "isCleared": false,
    "days": 25,
    "amount": 100
}